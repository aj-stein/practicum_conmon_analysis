{
  "id": "D_kwDOOMDw3M4AfUhH",
  "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21",
  "title": "Change Management: How do we monitor system changes and ensure impacts to security are measured and addressed?",
  "body": "### Context: \r\nAs the FedRAMP PMO drafts the Key Security Indicators, we are very interested in getting this community's ideas for how automated validation could be implemented in different specific cases. In your response, we encourage focusing on the technical specifics.  By working through this very specific example in depth, we hope to discover more about how other similar questions can be addressed. \r\n\r\n\r\n## Take the T/F statement: System changes are monitored and impacts to security are measured and addressed. \r\n\r\n- How might a small Li-SaaS company report on that statement?\r\n- How could we automate the evaluation of this statement on major platforms right now?\r\n    - GCP, Azure, AWS, etc.....\r\n- How do we create processes that allow 3PAOs to verify it?\r\n",
  "author": "kyhu65867",
  "created_at": "2025-04-16T16:43:33Z",
  "comments": [
    {
      "id": "DC_kwDOOMDw3M4AxDNT",
      "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12858195",
      "body": "First off, we need to define what constitutes a change here.  Are we talking CM-3, the change control processes, or more like SI-7 as in a change from baseline (changes to software, config, etc).\r\n\r\nOne area that I think has merit is alignment between a change and IAC; a change implies an update to Infrastructure-as-Code which I think helps there.  A pull request (or something similar) would be documented and immediately trackable.  The catch there is that forcing IaC is a big lift, particularly for a 'small Li-SaaS'.  That requires a level of maturity that not all (perhaps not even most) currently have in place. \r\n\r\nI have also seen integrations with change tickets into other tools like Slack, which worked well.  It allowed for an asychronous 'change control meeting' with X number of people having to approve/vote each issue.  That might be automatable as far as the process (change ticket, approval, etc), but does NOT necessarily get us the 'content of a given change'  \r\n",
      "author": "jsantore-cgc",
      "created_at": "2025-04-16T17:52:41Z",
      "replies": [
        {
          "id": "DC_kwDOOMDw3M4AxGa5",
          "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12871353",
          "body": "Do you (or anyone in the community) have any insights into how changes are managed at small Li-SaaS companies now? \r\n\r\nI also concur with your point that change is a complicated thing to define since there are all sorts of changes. FedRAMP is currently drafting a standard on Significant Change Requests which hopefully will clarify things, but definitely something that would need to be specified. What types of changes do you think have the most impact on a CSO's security posture?",
          "author": "kyhu65867",
          "created_at": "2025-04-17T19:45:20Z"
        },
        {
          "id": "DC_kwDOOMDw3M4AxI9z",
          "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12881779",
          "body": "@kyhu65867 First off, in over 7 years as a 3PAO, I think I might have done one, maybe two LI-SaaS based projects, so I can't speak to that with any real experience.  We just rarely did them.  That's also why I have reservations about LI-SaaS being the lens to view this concept through since they tended to be one off unique environments.\r\n\r\nI have a bunch of experience with in general systems handled changes across the spectrum.  Some good practices:\r\na- define the types of changes (pre-approved, minor, major, significant or whatever, and the thresholds for each)\r\nb- have a strict objective heuristic or checklist for evaluating these changes.  By that I mean all non-preapproved changes per CM-4 need to go through this checklist.   If the checklist triggers on any specific things, you formally do a full SIA.  Based on that, it goes the approval queue.\r\nc- changes are then approved, sent back for rework, or if there was an SIA and the SIA determined the change was significant enough to to justify a full  'Significant Change' in the FedRAMP assessment sense of the word, and you do the SCR, SAP, SAR and all of that.\r\nd- approved change is implemented\r\ne- post implementation review\r\n\r\nI think the key piece is the evaluation checklist, which I can also sketch something out if you want.  But the gist is:\r\n- does this affect customer data, and if so, how\r\n- does this affect any encryption, and if so, how\r\n- does this leverage existing identity mechanisms\r\n- etc...  \r\n\r\n\r\n\r\n ",
          "author": "jsantore-cgc",
          "created_at": "2025-04-18T21:26:04Z"
        },
        {
          "id": "DC_kwDOOMDw3M4AxNlU",
          "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12900692",
          "body": "@jsantore-cgc I appreciate your insights! It seems like these are very focused on change management in a compliance sense. Any thoughts on things like the CI/CD pipeline and how secure systems manage changes outside of FedRAMP? \r\n\r\nI know many cloud services have a separate gov instance that lags behind their commercial instance specifically because of how lengthy the \"significant change\" process can be. I am interested in learning some industry best practices for change management for commercial updates and releases, and how companies ensure that their services stay secure even with the rapid pace of innovation. If we know how it works for private sector, we could maybe try to plug in some automated processes that demonstrate \"compliance\" without the complicated paperwork, if that makes sense. ",
          "author": "kyhu65867",
          "created_at": "2025-04-21T16:54:02Z"
        },
        {
          "id": "DC_kwDOOMDw3M4AxNt4",
          "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12901240",
          "body": "@kyhu65867 \r\nActually, I've seen confusion with the 'change management from a compliance sense' and change management from CI/CD, so it's important to make sure everyone is on the same page as to what we're trying to solve and what we mean.\r\n\r\nTo handle CI/CD and rapid 'changes' we need to focus on what's deemed a pre-approved change.  Also, what sort of element/component is changing?  Application functionality (usually not a significant anyway) is different than say configuration changes or infrastructure changes.\r\n\r\nFor pre-approved changes, you can absolutely do CI/CD with.  The best implementation I've seen (and I wish I could name drop them, because credit where credit is due and their stuff was really slick) was someone who basically required everything to be n-1 version compatible.  They had a load balancer in front of it.  Consider a load balancer with 4 nodes behind it: {a,b,c,d}  Let's look at the versions on that.\r\n\r\nPush a new release and you have:  {n-1,n-1, n-1,n}   \r\nSince everything is n-1 compatible the application functionality ran just fine.\r\nAfter you see things stable, you start cycling in more version n's:  {n-1, n-1, n, n} and eventually all verson n.  Then repeat again with version n+1.  If you need to back out, you just remove that node from the load balancer.\r\n\r\nThe keys here are:\r\na- need to have a really good and clear definition of preapproved changes, and what's covered and what's not.  \r\nb- you need to ensure everything is n-1 compatible.  \r\n\r\nThat said, that's for application functionality, and I'm not sure how well that model would work for infrastructure itself.  \r\n\r\nIf you want to see how it works for commercial focus again on what change are allowed to be pushed into prod and which aren't (so again, definition of pre-approved changes).  \r\n\r\nI hope that helps and doesn't confuse things even further.\r\n",
          "author": "jsantore-cgc",
          "created_at": "2025-04-21T17:58:24Z"
        }
      ]
    },
    {
      "id": "DC_kwDOOMDw3M4AxDVO",
      "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12858702",
      "body": "> Take the T/F statement: System changes are monitored and impacts to security are measured and addressed.\r\n\r\nI agree with the above from @jsantore-cgc, but also, why does it have to be true/false?\r\n\r\nWould it not be more objective if we measure how many system changes are correctly monitored over total number of changes detected, internally or externally? If we go with this approach, we limit the need for very detailed classification about what is true and what is false for the statement.\r\n",
      "author": "aj-stein-gsa",
      "created_at": "2025-04-16T18:42:24Z",
      "replies": [
        {
          "id": "DC_kwDOOMDw3M4AxGam",
          "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12871334",
          "body": "I like this interpretation AJ. I think the goal for the KSIs is to have overarching standards, and then together with this working group we help to define the specifications for how we measure them and define those in a machine readable way, so that we can make changes to those specifications more rapidly and in line with changing security findings and machines can detect and immediately adjust. But the overarching theme, even with those changing definitions, stays the same. So something like the number of changes monitored/ detected is a much better and more granular measurement than a true/false, and would be defined in a specification for that T/F statement with a benchmark. ",
          "author": "kyhu65867",
          "created_at": "2025-04-17T19:41:26Z"
        }
      ]
    },
    {
      "id": "DC_kwDOOMDw3M4AxNxm",
      "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12901478",
      "body": "Food for thought....\r\n\r\nThere are really 2 parts to this validation:\r\n\r\n1. Are systems monitored for change, and\r\n2. Are the security impact of changes measured and addressed\r\n\r\nPart 1 seems like the easier piece of this from an automation standpoint.  Do you have baseline configurations and do you monitor your deployed systems for compliance with those baselines?  This one best practice can address so many risks but I rarely see it implemented. \r\n\r\nI am very interested to hear from CSPs about his.  If you do it, how? If you don't do it, what are the barriers?\r\n\r\nThe second part is a little more squishy, right? Although maybe this one is also really 2 questions. If I am using security scanning tools to review changes in a CI/CD pipeline does that meet the \"measured\" part? If I hold the change until those sans are clean does that meet the \"addressed\" part? In one development team I worked with the rule was if you could run the static code analyzer and get a report with no findings you could go ahead and deploy. If there were any findings you needed a security team member to review and approve.\r\n\r\nAgain, very interested to hear from CSPs about his.  If you do it, how? If you don't do it, what are the barriers?\r\n",
      "author": "dan-fedramp",
      "created_at": "2025-04-21T18:28:26Z",
      "replies": []
    },
    {
      "id": "DC_kwDOOMDw3M4Axk5Y",
      "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12996184",
      "body": "For a Li-SaaS company on AWS (as an example), the configuration described [in this article](https://medium.com/@TechStoryLines/receive-sns-alerts-when-new-resources-are-created-in-your-aws-account-db749b16445f) could help address part of this KSI. Essentially you'd set up AWS Config to record, make an EventBridge rule to watch for new resources (S3 bucket, EC2, database, etc) at a set interval say 5 minutes. Lastly, setup an SNS topic that sends alerts/notifications (via email, slack, pagerduty, etc) when the EventBridge rule fires. This provides a close to real-time notification when any new resource is launched and could trigger a Jira ticket or similar to start the security review process. An IaC tool like Terraform/CloudFormation could enable Li-SaaS teams to quickly deploy this into their environment with little cost or overhead. \r\n![image](https://github.com/user-attachments/assets/2d99fb46-9c49-482c-8838-46de1d210560)\r\nThis approach only addresses new resources added to the cloud and doesn't cover configuration changes to existing systems but it's a starting point. AWS Config can monitor some configuration changes to existing systems but can't monitor at a ultra-precise file level like a FIM tool would. \r\n\r\nFor 3PAO verification a resource could be spun up to verify that the alert system works or potentially better, a review of the IaC and comparison between the IaC code and the active state (terraform.tfstate file or equivalent).  \r\n\r\nOne question I have as I thought through this process is **what level of granularity does \"System changes\" include?** I expect a new resource in the cloud certainly counts as a system change or an operating system upgrade but what about host based firewall rule changes or permissions for specific users on specific files on a system? Is this KSI meant to extend to file integrity monitoring or stay high level and look at architecture system changes? Clarifying if \"system\" means the overall architecture or each specific computing resource (VM, container, etc) would be helpful as many CSPs will use different tooling for CSPM vs FIM. \r\n\r\n-- Isaac Teuscher (Paramify)\r\n",
      "author": "iteuscher",
      "created_at": "2025-04-30T16:07:15Z",
      "replies": [
        {
          "id": "DC_kwDOOMDw3M4AxlM6",
          "url": "https://github.com/FedRAMP/automating-assessment-cwg/discussions/21#discussioncomment-12997434",
          "body": "Great idea! You can actually enhance this further and address a lot of the questions you ask by using immutable containers or similar technology so the only way to deploy a change is to add a new resource replacing the old one. It is a bit of a paradigm shift for some components but it has the added benefit of significantly reducing attack surface by making it much more difficult for an attacker to make any changes to the system.",
          "author": "dan-fedramp",
          "created_at": "2025-04-30T18:17:43Z"
        }
      ]
    }
  ]
}