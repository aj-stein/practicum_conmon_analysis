{
  "id": "D_kwDOOK0ax84AfTch",
  "url": "https://github.com/FedRAMP/rev5-continuous-monitoring-cwg/discussions/28",
  "title": "What is a vendor? VDs, ORs, and Abandonware",
  "body": "When it comes to Open Source Software and vendors, the guidance from FedRAMP leaves a lot open to interpretation. I have a lot of customers and stakeholders that are unclear as to what constitutes a vendor. At the same time, people who focus on security have a different view. In this discussion, I'm going to wear my security hat. \r\n\r\nVendors are not clearly defined by FedRAMP. This is a definition that I think needs to be made crystal clear. This is incredibly important because this impacts the ability for CSOs to report risk as it pertains to Vendor Dependencies and Operational Requirements. Accountability for patching is also unclear due to the lack of a clear definition here. \r\n\r\nAs an example, what happens when an Open Source Project is used in a CSO and doesn't patch for 12+ months? Well, in this case, Vendor Dependencies are routinely accepted. This creates a loophole where risks of vulnerabilities are often perpetually accepted. This is further problematic because Open Source projects often do not have paid support. Paid support contracts, in almost all cases, are a forcing function for patching and addressing vulnerabilities. Without paid support, there is no contractual obligation to patch. What this has caused is the ability to push patching responsibilities to an Open Source Project, which is not contractually obligated to patch or maintain their code. In this case, it should be clearly defined by FedRAMP that it is the CSOs responsibility to patch Open Source Software that is not otherwise commercially maintained through a support contract. \r\n\r\nMy ask to FedRAMP is to clearly define what a vendor is and where the accountability lies. \r\n\r\nVendor - Any software or hardware vendor that offers paid support and is contractually obligated to patch their code or hardware. \r\n\r\nOpen Source Project - An open source project that is under no obligation to patch, where the code is freely available for use. Projects may be patched as a best effort, but no contracted support is available. \r\n\r\nFor an Open Source Project that is in use by a CSO, it must be the CSO's responsibility to patch with the above definition for a vendor. This will both help agencies better assess risk as well as help CSOs understand their patching obligations with 3rd party vendors and Open Source Projects. \r\n\r\nAbandonware must also be clearly defined by FedRAMP. Without a clear definition, accountability and responsibility is unclear as to whether its a defunct vendor or unmaintained project. \r\n\r\nI'd recommend the following definition for \"Abandonware\".\r\n\r\nAbandonware - Any software that is no longer commercially supported or contractually supported under a paid contract. Any software that has not been updated within 90 days or with no activity for 30 days (these can be better defined, but you get the idea). Abandonware is also inclusive of End of Life software. \r\n\r\nWith a clear understanding of what Abandonware is, it will help agencies and CSOs understand what is the CSOs responsibility to patch and maintain if they want to continue using software that is no longer commercially supported. This would also include End of Life software.\r\n\r\nI think with these changes, it will substantially improve the accuracy and understanding of risk on the POA&M.",
  "author": "robgil",
  "created_at": "2025-04-15T16:31:52Z",
  "comments": [
    {
      "id": "DC_kwDOOK0ax84AxACK",
      "url": "https://github.com/FedRAMP/rev5-continuous-monitoring-cwg/discussions/28#discussioncomment-12845194",
      "body": "With my advocate hat off, I will echo what other say this is a great topic to explore. Not committing to anything but in the interest of understanding more deeply, I have a few follow-up questions.\r\n\r\n> Vendor - Any software or hardware vendor that offers paid support and is contractually obligated to patch their code or hardware.\r\n> \r\n> Open Source Project - An open source project that is under no obligation to patch, where the code is freely available for use. Projects may be patched as a best effort, but no contracted support is available.\r\n\r\nSome open source projects might not necessarily have novel development or maintenance from a commercial entity. Even if there is a commercial entity that develops or maintains an open source project, some of them will never have commercial support. How do we handle those? I have two examples that are slightly different, but to me represent common use cases that fall on the edges of the three circles, I can think of in this weird Venn diagram turn into words. Maybe later, I can draw it out.\r\n\r\nFor example, the upstream vanilla distribution of Kubernetes may have commercial support contracts for customized and or proprietary derivatives, but that's not really the vanilla distribution. Is this an example of vendor maintained open source projects or not? This is a very niche example, but I do expect you will not find any contractual relationship between the CNCF developers and the employers of downstream engineers, using it in the cloud, and I am aware of some engineers using it I'll be at maybe not for FedRAMP authorized services.\r\n\r\nEven more complex are language runtimes that provide that project and almost every other project imaginable vendor maintained or not. The Golang ecosystem and the runtime are interesting example because it is an open source project maintained by a large commercial entity, but as far as I know there has not been, and there will never be a plan to offer commercial support for long-term support distributions or the latest stable release. How would your definitions impact their future class of education as abandonware? To compile an execute Golang applications with FIPS-140 support [it is very likely you'll be using a custom compiled runtime for which you can never receive commercial support](https://go.dev/doc/security/fips140#goboringcrypto). That's why I ask with this particular example. I'm unfortunately familiar with it.\r\n",
      "author": "aj-stein-gsa",
      "created_at": "2025-04-15T17:43:49Z",
      "replies": [
        {
          "id": "DC_kwDOOK0ax84AxAMy",
          "url": "https://github.com/FedRAMP/rev5-continuous-monitoring-cwg/discussions/28#discussioncomment-12845874",
          "body": "> Some open source projects might not necessarily have novel development or maintenance from a commercial entity. Even if there is a commercial entity that develops or maintains an open source project, some of them will never have commercial support. How do we handle those? I have two examples that are slightly different, but to me represent common use cases that fall on the edges of the three circles, I can think of in this weird Venn diagram turn into words. Maybe later, I can draw it out.\r\n\r\nIt needs to be made clear that if it's the CSP's responsibility to patch the unsupported software they chose. That is Open Source at it's root. It's free software, but not free to use. The responsibility for maintaining open source software is the responsibility of everyone who uses it, unless a commercial entity takes up that responsibility as a paid support offering (Elastic, RedisLabs, MongoDB, etc). \r\n\r\n> For example, the upstream vanilla distribution of Kubernetes may have commercial support contracts for customized and or proprietary derivatives, but that's not really the vanilla distribution. Is this an example of vendor maintained open source projects or not? This is a very niche example, but I do expect you will not find any contractual relationship between the CNCF developers and the employers of downstream engineers, using it in the cloud, and I am aware of some engineers using it I'll be at maybe not for FedRAMP authorized services.\r\n\r\nIf the Vanilla upstream distribution provides no paid support or no contractual obligation to patch, it is not vendor maintained. This is why companies like TuxCare and others exist, to take that responsibility on for the commercial company. \r\n\r\n> Even more complex are language runtimes that provide that project and almost every other project imaginable vendor maintained or not. The Golang ecosystem and the runtime are interesting example because it is an open source project maintained by a large commercial entity, but as far as I know there has not been, and there will never be a plan to offer commercial support for long-term support distributions or the latest stable release. How would your definitions impact their future class of education as abandonware? To compile an execute Golang applications with FIPS-140 support [it is very likely you'll be using a custom compiled runtime for which you can never receive commercial support](https://go.dev/doc/security/fips140#goboringcrypto). That's why I ask with this particular example. I'm unfortunately familiar with it.\r\n\r\nThis would fall on the CSP to maintain and patch where no contractual obligation with a vendor exists. This is simply the open source model. If you use it, the expectation is that you contribute back to it. With this Go example, you could get commercial patching support from companies like Chainguard or with the [Microsoft fork of Go](https://github.com/microsoft/go/blob/microsoft/main/eng/doc/fips/README.md).\r\n\r\nClarifying the expectations around Open Source Software will not only improve ability to determine risk, it will also foster greater contributions back to the open source projects and spur entrepreneurial expansion in businesses to officially support and maintain this software. Open source maintainers are mostly volunteers. ",
          "author": "robgil",
          "created_at": "2025-04-15T18:55:44Z"
        },
        {
          "id": "DC_kwDOOK0ax84AxBDJ",
          "url": "https://github.com/FedRAMP/rev5-continuous-monitoring-cwg/discussions/28#discussioncomment-12849353",
          "body": "I just wanted to tease out some of these concepts. Having read your responses, we are thoroughly aligned.",
          "author": "aj-stein-gsa",
          "created_at": "2025-04-16T03:48:20Z"
        }
      ]
    }
  ]
}